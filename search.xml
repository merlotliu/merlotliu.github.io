<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Timeout 解决策略</title>
    <url>/2022/07/15/git-timeout-solution/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><code>github</code>网页能够正常打开，但在 <code>git bash</code>中 <code>push</code> 总失败。</p>
<h2 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h2><p>为<code>git</code>设置代理，首先在 <code>设置 ---- 网络 ---- 代理 ---- 代理服务器 ---- 编辑</code>中找到自己的代理 <code>port</code>。</p>
<p><img src="/../images/posts/git-timeout-solution.assets/image-20220714092128907.png" alt="image-20220714092128907"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">設置代理</span></span><br><span class="line">git config --global http.proxy  &#x27;http://127.0.0.1:&lt;proxy_port&gt;&#x27;</span><br><span class="line">git config --global https.proxy  &#x27;http://127.0.0.1:&lt;proxy_port&gt;&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>issues</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git-issues</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Installation &amp; Deployment</title>
    <url>/2022/07/13/hexo-installation-deployment/</url>
    <content><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>安装<code>Hexo</code>需要先安装好<code>Node.js</code>和<code>Git</code>，在下面地址下载然后傻瓜式安装即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a></li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<h2 id="Hexo-Installation"><a href="#Hexo-Installation" class="headerlink" title="Hexo Installation"></a>Hexo Installation</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安裝 hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先切換到你想要建立 hexo 項目的一個路徑下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">創建一個文件夾，並初始化項目</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安裝相關依賴</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打開本地服務器</span></span><br><span class="line">npm server</span><br></pre></td></tr></table></figure>

<p>啓動服務器后，在瀏覽器地址欄輸入<code>http://localhost:4000/</code>，回車出現<code>Hexo</code>相關界面則説明安裝成功。</p>
<h2 id="Hexo-Deployment-in-Github-Pages"><a href="#Hexo-Deployment-in-Github-Pages" class="headerlink" title="Hexo Deployment in Github Pages"></a>Hexo Deployment in Github Pages</h2><ol>
<li><p>安裝 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>；</p>
</li>
<li><p>修改 <code>_config.yml</code> 文件，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># branch name</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>運行 <code>hexo clean &amp;&amp; hexo deploy</code>；</p>
</li>
<li><p>瀏覽器輸入<code>username.github.io</code>，如果正常顯示則部署成功；</p>
</li>
</ol>
<p><strong>Notes</strong>：官方文檔說可以將倉庫權限設置為 <code>private</code>，但我試了好幾次都失敗了，從<code>public</code>修改爲<code>private</code>，都需要等一會才能正常顯示。</p>
<h2 id="Hexo-Site-目錄結構"><a href="#Hexo-Site-目錄結構" class="headerlink" title="Hexo Site 目錄結構"></a>Hexo Site 目錄結構</h2><p><code>&lt;folder&gt;</code>下的目錄結構如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>網站配置信息，修改内容會使得網站樣式改變。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>相關插件的版本信息。默認安裝 <a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 。可以使用 <code>npm</code> 移除。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">package.json<span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p> <a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。新建這三類文件時會根據 <code>scaffold</code>中的模板 来建立文件。<code>draft</code> 、<code>page</code>、<code>post</code>分別是<strong>草稿</strong>、<strong>頁面</strong>和<strong>文章</strong>。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。使用<code>hexo generate</code>生成時，<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹，<code>Hexo</code> 会根据主题来生成静态页面。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://hexo.io/">https://hexo.io</a>；</li>
<li><a href="https://hexo.io/docs/github-pages#One-command-deployment">https://hexo.io/docs/github-pages#One-command-deployment</a>；</li>
<li><a href="https://hexo.io/docs/setup">https://hexo.io/docs/setup</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Issues</title>
    <url>/2022/07/14/hexo-issues/</url>
    <content><![CDATA[<h4 id="fatal-in-unpopulated-submodule-‘-deploy-git’"><a href="#fatal-in-unpopulated-submodule-‘-deploy-git’" class="headerlink" title="fatal: in unpopulated submodule ‘.deploy_git’"></a>fatal: in unpopulated submodule ‘.deploy_git’</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><h5 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h5><p>刪掉 <code>.deploy_git</code>文件，再重新部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h4 id="err-YAMLException-duplicated-mapping-key"><a href="#err-YAMLException-duplicated-mapping-key" class="headerlink" title="err: YAMLException: duplicated mapping key"></a>err: YAMLException: duplicated mapping key</h4><h5 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5><p>出现了不知名的符号，比如多余了空格之类的。通常是由于复制粘贴产生的。</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>检查错误前后是否有多余空格。如果反复修改，仍然报错。建议使用<code>hexo new [layout] &lt;filename&gt;</code>重新生成一个文档，这样的文档里的<code>Front-Matter</code>通常是没有问题的。</p>
<h4 id="tags-与-categories-页面无内容"><a href="#tags-与-categories-页面无内容" class="headerlink" title="tags 与 categories 页面无内容"></a>tags 与 categories 页面无内容</h4><h5 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5><p>沒有設置<code>type</code>屬性</p>
<h5 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h5><p>在页面的<code>Front-Matter</code>中添加<code>type</code>属性，后面的值分别为<code>tags</code> 与 <code>categories</code>:</p>
<p><code>/source/tags/index.md</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><code>/source/categories/index.md</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
        <category>issues</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-issues</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/07/16/git/</url>
    <content><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>1. </p>
]]></content>
  </entry>
  <entry>
    <title>Hexo &amp; NexT 设置头像</title>
    <url>/2022/07/14/hexo-next-avatar/</url>
    <content><![CDATA[<p>在主題配置文件  _config.next.yaml 中找到以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar/avatar-1.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>設置<code>url</code>的值，<code>/images</code>对应的是<code>theme/next/source/images/</code>。也就是说把图片放置在<code>theme/next/source/images/</code>目录下，就能根据配置好的 <code>url</code>找到。<br>例如，这里的 <code>/images/avatar/avatar-1.jpg</code>，就是<code>theme/next/source/images/avatar/</code>下的<code>avatar-1.jpg</code>文件。</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>theme</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-theme</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT Custom Files</title>
    <url>/2022/07/15/hexo-next-custom-file/</url>
    <content><![CDATA[<h2 id="Hexo-source"><a href="#Hexo-source" class="headerlink" title="Hexo source"></a>Hexo source</h2><p>在 Hexo 的 <code>source</code>的下创建<code>_data</code>文件夹用于放置 NexT 相关的配置文件。Hexo 站点下的<code>/source/_data</code>是 NexT 的 Custom Files 的默认目录。</p>
<h2 id="NexT-配置文件"><a href="#NexT-配置文件" class="headerlink" title="NexT 配置文件"></a>NexT 配置文件</h2><p>在配置文件中找到如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>添加了对应的文件，就将对应的注释放开即可。</p>
<p><strong>Notes</strong>：文件名和路径必须是<code>custom_file_path</code>的内容。</p>
<h2 id="添加文末标记"><a href="#添加文末标记" class="headerlink" title="添加文末标记"></a>添加文末标记</h2><p><img src="/../images/posts/hexo-next-custom-file.assets/image-20220715144740870.png" alt="image-20220715144740870"></p>
<h3 id="postBodyEnd-njk"><a href="#postBodyEnd-njk" class="headerlink" title="postBodyEnd.njk"></a>postBodyEnd.njk</h3><p>创建文件 <code>postBodyEnd.njk</code>，将以下内容输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>------触即底线<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>阅读结束------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且，放开对应注释 <code>postBodyEnd: source/_data/postBodyEnd.njk</code>。</p>
<h2 id="背景几何-Canvas-Nest"><a href="#背景几何-Canvas-Nest" class="headerlink" title="背景几何 Canvas Nest"></a>背景几何 Canvas Nest</h2><p><img src="/../images/posts/hexo-next-custom-file.assets/screenshot.png" alt="screenshot"></p>
<h3 id="footer-njk"><a href="#footer-njk" class="headerlink" title="footer.njk"></a>footer.njk</h3><p>创建文件 <code>footer.njk</code>，将以下内容输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">color</span>=<span class="string">&quot;0,0,255&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0.5&quot;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且，放开对应注释 <code>footer: source/_data/footer.njk</code>。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><strong><code>color</code></strong>: color of lines, default: <code>&#39;0,0,0&#39;</code>; RGB values: (R,G,B).(note: use ‘,’ to separate.)</li>
<li><strong><code>pointColor</code></strong>: color of points, default: <code>&#39;0,0,0&#39;</code>; RGB values: (R,G,B).(note: use ‘,’ to separate.)</li>
<li><strong><code>opacity</code></strong>: the opacity of line (0~1), default: <code>0.5</code>.</li>
<li><strong><code>count</code></strong>: the number of lines, default: <code>99</code>.</li>
<li><strong><code>zIndex</code></strong>: z-index property of the background, default: <code>-1</code>.</li>
</ul>
<p>相关链接：<a href="https://github.com/hustcc/canvas-nest.js">canvas-nest.js</a> for <a href="https://github.com/theme-next">NexT</a>。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://theme-next.js.org/docs/advanced-settings/custom-files">https://theme-next.js.org/docs/advanced-settings/custom-files</a>；</li>
<li><a href="https://hexo.io/docs/data-files">https://hexo.io/docs/data-files</a>；</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>theme</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-theme</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo &amp; NexT 添加 Gitalk 评论系统</title>
    <url>/2022/07/14/hexo-plugin-gitalk/</url>
    <content><![CDATA[<h2 id="NexT-配置文件"><a href="#NexT-配置文件" class="headerlink" title="NexT 配置文件"></a>NexT 配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances | isso</span></span><br><span class="line">  <span class="attr">active:</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="comment"># 设置延迟加载</span></span><br><span class="line">  <span class="comment"># NexT 采用的是 IntersectionObserver 来延迟加载注释</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Modify icons and texts for any style, here are some examples</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="comment">#gitalk:</span></span><br><span class="line">    <span class="comment">#  order: -2</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="禁用评论"><a href="#禁用评论" class="headerlink" title="禁用评论"></a>禁用评论</h2><p>评论系统启动后，所有新页面会自动开启评论服务。如果想要禁用某个页面的评论，在页面的<code>.md</code>文件的<code>front-matter</code>中将<code>comments</code>的值设置为<code>false</code>即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># YOUR_POST_OR_PAGE.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p>Gitalk 是一个基于 Github Issue 和 Preact 的现代评论组件。</p>
<ol>
<li>点击这里登陆并创建 Github Application <a href="https://github.com/settings/applications/new">new OAuth Application</a>。其他内容可以随意填写，但一定要填写正确的回调URL（一般是评论页对应的域名）。然后您将获得一个（Client ID）客户端 ID 和一个客户端密码（Client secret）。</li>
<li>将第一步中的 Client ID 和 Client secret 设置在 NexT Config File 中。</li>
</ol>
<h3 id="Github-Application"><a href="#Github-Application" class="headerlink" title="Github Application"></a>Github Application</h3><p>使用 <code>gittalk</code> 需要先在 Github 创建应用，主要是为了获取 <code>clientID</code> 和 <code>clientSecret</code>，能够有权限将留言放置在 <code>Issue</code>。</p>
<p><img src="/../images/posts/hexo-plugin-gitalk.assets/image-20220714111107334.png" alt="image-20220714111107334"></p>
<h3 id="NexT-Config-File"><a href="#NexT-Config-File" class="headerlink" title="NexT Config File"></a>NexT Config File</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span>  <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">GIT_NAME</span> <span class="comment"># Github名字</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># 仓库名字不是链接</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">Client</span> <span class="string">ID</span> <span class="comment"># 申请的 GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">Client</span> <span class="string">Secret</span> <span class="comment"># 生成的 GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">GIT_NAME</span> <span class="comment"># Github名字</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="comment"># This is official proxy address</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
        <category>plugin</category>
        <category>Gitalk</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Hexo-plugin</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Readmore</title>
    <url>/2022/07/14/hexo-readmore/</url>
    <content><![CDATA[<p>在 Hexo 中可以使用以下方式添加 Readmore：</p>
<h4 id="使用-lt-–-more-–-gt-标签"><a href="#使用-lt-–-more-–-gt-标签" class="headerlink" title="使用 &lt;!– more –&gt; 标签"></a>使用 &lt;!– more –&gt; 标签</h4><p>在文章中合适的位置添加 <code>&lt;!-- more --&gt;</code> 标签。这一方式使用灵活，也是Hexo推荐的方法。</p>
<span id="more"></span>

<p><img src="/../images/posts/hexo-readmore.assets/image-20220714145549033.png" alt="image-20220714145549033"></p>
<h4 id="在-Front-Matter-中添加-description-属性"><a href="#在-Front-Matter-中添加-description-属性" class="headerlink" title="在 Front-Matter 中添加 description 属性"></a>在 Front-Matter 中添加 description 属性</h4><p>在文章中的<code>front-matter</code>中添加<code>description</code>，并在后面输入文章的<strong>摘要信息</strong>。通常这一方式只在主页显示，打开文章后是看不到的。</p>
<p><img src="/../images/posts/hexo-readmore.assets/image-20220714150020042.png" alt="image-20220714150020042"></p>
<h4 id="使用-hexo-excerpt-自动添加"><a href="#使用-hexo-excerpt-自动添加" class="headerlink" title="使用 hexo-excerpt 自动添加"></a>使用 hexo-excerpt 自动添加</h4><p>输入以下命令安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>在站點配置文件 <code>_config.yml</code> 中添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 5  # 可預覽長度</span><br><span class="line">  excerpt_excludes: [] </span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
        <category>plugin</category>
        <category>excerpt</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT Configuration</title>
    <url>/2022/07/14/hexo-theme-next-config/</url>
    <content><![CDATA[<p>完整的 <code>_config.next.yml</code> 链接参考：<a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p>
<h3 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h3><p>可以從 <code>Muse</code> 、<code>Mist</code> 、<code>Pisces</code>、 <code>Gemini</code>中任選其一。</p>
<p><code>darkmode</code> 為黑夜模式，默認 <code>false</code>。</p>
<p>主题配置文件 :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>主题配置文件 :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment"># home</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># tags</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="comment"># archives</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span> </span><br><span class="line">  <span class="comment"># categories</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span> </span><br><span class="line">  <span class="comment"># essay</span></span><br><span class="line">  <span class="string">札记:</span> <span class="string">/essay/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sticky-note</span> </span><br><span class="line">  <span class="comment"># msg</span></span><br><span class="line">  <span class="string">留言:</span> <span class="string">/msg/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-comment</span></span><br><span class="line">  <span class="comment"># about</span></span><br><span class="line">  <span class="string">关于他:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="comment"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="标签页面-Tags-Page"><a href="#标签页面-Tags-Page" class="headerlink" title="标签页面 Tags Page"></a>标签页面 Tags Page</h3><p>将所有标签添加到 Tags 页面中</p>
<p>首先，创建一个页面名叫 <code>tags</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑 <code>tags</code>页面, 设置<code>Front-Matter</code>中的<code>type</code>属性为 <code>tags</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: All tags</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>把 <code>tags</code> 添加到主题配置文件 <code>_config.next.yml</code>（后文指的配置文件都是ta）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

<h3 id="分类页面-Categories-Page"><a href="#分类页面-Categories-Page" class="headerlink" title="分类页面 Categories Page"></a>分类页面 Categories Page</h3><blockquote>
<p>将所有分类添加到 Tags 页面中</p>
</blockquote>
<p>首先，创建一个页面名叫 <code>categories</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>编辑<code>categories</code>页面, 设置<code>Front-Matter</code>中的<code>type</code>属性为<code>categories</code>： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: All categories</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>把 <code>categories</code> 添加到主题配置文件 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: /</span><br><span class="line">    archives: /archives</span><br><span class="line">    categories: /categories</span><br></pre></td></tr></table></figure>

<h3 id="頭像設置"><a href="#頭像設置" class="headerlink" title="頭像設置"></a>頭像設置</h3><p>主题配置文件 :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar/avatar-1.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>設置<code>url</code>的值，<code>/images</code>对应的是<code>theme/next/source/images/</code>。也就是说把图片放置在<code>theme/next/source/images/</code>目录下，就能根据配置好的 <code>url</code>找到。<br>例如，这里的 <code>/images/avatar/avatar-1.jpg</code>，就是<code>theme/next/source/images/avatar/</code>下的<code>avatar-1.jpg</code>文件。</p>
<h3 id="頭向下的日志-x2F-分類-x2F-標簽"><a href="#頭向下的日志-x2F-分類-x2F-標簽" class="headerlink" title="頭向下的日志&#x2F;分類&#x2F;標簽"></a>頭向下的日志&#x2F;分類&#x2F;標簽</h3><p>主題配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="社交帳號"><a href="#社交帳號" class="headerlink" title="社交帳號"></a>社交帳號</h3><p>主題配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/merlotliu</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:merlotliu@mail.nwpu.edu.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment"># Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="相關鏈接"><a href="#相關鏈接" class="headerlink" title="相關鏈接"></a>相關鏈接</h3><p>主題配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># related links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">https://example.com</span></span><br></pre></td></tr></table></figure>

<h3 id="文章目錄-Toc"><a href="#文章目錄-Toc" class="headerlink" title="文章目錄 Toc"></a>文章目錄 Toc</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="文章字數-amp-閲讀時長"><a href="#文章字數-amp-閲讀時長" class="headerlink" title="文章字數 &amp; 閲讀時長"></a>文章字數 &amp; 閲讀時長</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure>

<h3 id="文章閲讀量-amp-網站訪問數"><a href="#文章閲讀量-amp-網站訪問數" class="headerlink" title="文章閲讀量 &amp; 網站訪問數"></a>文章閲讀量 &amp; 網站訪問數</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>theme</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-theme</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo &amp; Typora 图片插入</title>
    <url>/2022/07/15/hexo-typora-pics/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Hexo 博客中，需要使用到 Markdown 的文档编辑页面内容。文档编辑过程中，经常会使用到图片。</p>
<p>在 Markdown 的格式中，插入图片的语法为  <code>![]()</code>。</p>
<p>其中路径，可以填写 <strong>相对路径</strong>、<strong>绝对路径</strong>以及<strong>网络路径</strong>。</p>
<p>网络路径，即为直接引用网络图片地址，他的最大问题是：</p>
<ul>
<li>网络不畅，加载过慢；</li>
<li>源地址不存在，加载失败；</li>
</ul>
<p>本人一直秉持着自己硬盘上的才是自己的东西，所以更倾向于使用前两种路径。</p>
<p>随着， Hexo 的更新，提供了两种解决策略：</p>
<ul>
<li>在站点配置文件中，添加<code>post_asset_folder: true</code>，具体请参见：<a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹 | Hexo</a>；</li>
<li>Hexo 插件 <a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>；</li>
</ul>
<p>但第一种方式，与 Typora 插入图片时插入自动生成的语法差距过大，不便于修改。</p>
<p>为此，本文提供了一种自认为更优雅的解决策略。</p>
<h2 id="Hexo-amp-Typora-插入图片的优雅解决策略"><a href="#Hexo-amp-Typora-插入图片的优雅解决策略" class="headerlink" title="Hexo &amp; Typora 插入图片的优雅解决策略"></a>Hexo &amp; Typora 插入图片的优雅解决策略</h2><h3 id="创建存放图片资源的文件夹"><a href="#创建存放图片资源的文件夹" class="headerlink" title="创建存放图片资源的文件夹"></a>创建存放图片资源的文件夹</h3><p>首先，在 Hexo 站点的 <code>source</code>目录下，创建一个文件夹，例如：<code>images/posts</code>：</p>
<p><img src="/../images/posts/hexo-typora-pics.assets/image-20220715131824921.png" alt="image-20220715131824921"></p>
<p><strong>Notes</strong>：</p>
<ol>
<li>这也是利用了 Hexo  中的 <code>source</code>目录下的规则。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li>
<li>所以不能命名为 <code>_</code>开头的文件。</li>
</ol>
<h3 id="修改-Typora-相关偏好设置"><a href="#修改-Typora-相关偏好设置" class="headerlink" title="修改 Typora 相关偏好设置"></a>修改 Typora 相关偏好设置</h3><p>依次打开 <code>Typora</code> —- <code>偏好设置</code> —- <code>图片</code>，按照类似下图的方式设置：</p>
<p><img src="/../images/posts/hexo-typora-pics.assets/image-20220715131427818.png" alt="image-20220715131427818"></p>
<h4 id="设置指定路径"><a href="#设置指定路径" class="headerlink" title="设置指定路径"></a>设置指定路径</h4><p>选择 <code>复制到指定路径</code>，并设置路径为<code>../</code>+刚才创建的路径+<code>/</code>+该文章需要存放的子文件夹名（可以没有，但建议有，方便后期迁移）。例如：<code>../images/posts/$&#123;filename&#125;.assets</code>；</p>
<h4 id="勾选"><a href="#勾选" class="headerlink" title="勾选"></a>勾选</h4><ul>
<li>对本地位置的图片应用上述规则；</li>
<li>对网络位置的图片应用上述规则；</li>
<li>优先使用相对路径；</li>
</ul>
<p><strong>Notes</strong>：</p>
<ol>
<li>前两条规则很好理解，最后一条是由于，上传网站后绝对路径会改变而相对路径不变。</li>
<li>其次，虽然路径前面有<code>../</code>，但在博客中引用时，还会再前面添加<code>/</code>。比如<code>../images/posts/img.jpg</code>在网页中引用时会变成<code>/../images/posts/img.jpg</code>，所以就是根目录下<code>../</code>仍然为根目录。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a>；</li>
<li><a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a>;</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT Installation</title>
    <url>/2022/07/13/hexo-theme-next-installation/</url>
    <content><![CDATA[<h2 id="NexT-Installation"><a href="#NexT-Installation" class="headerlink" title="NexT Installation"></a>NexT Installation</h2><h3 id="Downloading-NexT"><a href="#Downloading-NexT" class="headerlink" title="Downloading NexT"></a>Downloading NexT</h3><p>打开终端，切换到 <code>Hexo 站点根目录下</code> ，然后安装 <code>NexT</code> 主题。</p>
<h4 id="使用npm："><a href="#使用npm：" class="headerlink" title="使用npm："></a>使用<code>npm</code>：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>

<h4 id="或使用git："><a href="#或使用git：" class="headerlink" title="或使用git："></a><strong>或</strong>使用<code>git</code>：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<p><strong>Notes</strong>：<code>hexo-site</code>是你的 Hexo 站點名字。</p>
<h3 id="Upgrading-NexT"><a href="#Upgrading-NexT" class="headerlink" title="Upgrading NexT"></a>Upgrading NexT</h3><h4 id="使用npm：-1"><a href="#使用npm：-1" class="headerlink" title="使用npm："></a>使用<code>npm</code>：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-theme-next@latest</span></span><br></pre></td></tr></table></figure>

<h4 id="或使用git：-1"><a href="#或使用git：-1" class="headerlink" title="或使用git："></a><strong>或</strong>使用<code>git</code>：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> themes/next</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master</span></span><br></pre></td></tr></table></figure>

<h3 id="NexT-Configuration"><a href="#NexT-Configuration" class="headerlink" title="NexT Configuration"></a>NexT Configuration</h3><h4 id="Enabling-NexT"><a href="#Enabling-NexT" class="headerlink" title="Enabling NexT"></a>Enabling NexT</h4><p>打開站點根目錄下的<code>_config.yml</code>，修改<code>theme</code>後面的值為<code>next</code>（安裝的其他主題也是在這裏修改）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h4 id="Checking-NexT"><a href="#Checking-NexT" class="headerlink" title="Checking NexT"></a>Checking NexT</h4><ol>
<li><p>輸入<code>hexo clean</code>清除緩存（這一步可以省略）；</p>
</li>
<li><p>輸入<code>hexo s --debug</code>，瀏覽器輸入<code>http://localhost:4000/</code>，看到以下界面説明配置生效：<br><img src="/../images/posts/hexo-theme-next-installation.assets/next-default-scheme.png" alt="Default Scheme – Muse"></p>
</li>
<li><p><code>Ctrl+C</code>關閉本地調試服務器；</p>
</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://theme-next.js.org/docs/getting-started/#NexT-Installation%EF%BC%9B">https://theme-next.js.org/docs/getting-started/#NexT-Installation；</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>theme</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-theme</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Update</title>
    <url>/2022/07/13/hexo-update/</url>
    <content><![CDATA[<h2 id="Hexo-Update"><a href="#Hexo-Update" class="headerlink" title="Hexo Update"></a>Hexo Update</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看當前 hexo 版本</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安裝 npm-upgrade</span></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Node.js項目下的 package.json</span></span><br><span class="line">npm-upgrade</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新全局安裝軟件包</span></span><br><span class="line">npm update -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 package.json 中的依賴項</span></span><br><span class="line">npm update --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看當前 hexo 版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS Installation in Windows</title>
    <url>/2022/07/12/nodejs-installation/</url>
    <content><![CDATA[<p>首先在官网 <a href="http://nodejs.org/">Node.js</a> 下载稳定的安装包，默认下一步安装。（仅建议修改一下安装路径）</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><p>安装完成之后，为了检查 <code>Node.js</code> 是否安装成功。打开 <code>cmd</code> ，依次输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看環境變量配置情況</span></span><br><span class="line">echo %PATH%</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 Node.js 版本信息</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">HOME%\AppData\Roaming\npm</span></span><br></pre></td></tr></table></figure>

<h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm  config list</span><br></pre></td></tr></table></figure>

<h1 id="错误合集"><a href="#错误合集" class="headerlink" title="错误合集"></a>错误合集</h1><p>错误描述：</p>
<p><code>npm</code> 因为<strong>权限不够</strong>或者文件被占用，无法在完成操作；</p>
<p><img src="/../images/posts/nodejs-installation.assets/image-20220712220751573.png" alt="image-20220712220751573"></p>
<p>分析：</p>
<p>显然是<code>npm</code>权限不够；</p>
<p>解决方案：</p>
<p>方法1：用管理员身份重新打开终端（临时解决）；</p>
<p>方法2：给<code>node.js</code>安装路径下的<code>node_cache</code>和<code>node_global</code>两个文件夹添加用户权限。</p>
<p>找到文件夹 —-&gt; 右键 —-&gt; 属性 —-&gt; 安全 —-&gt; Users —-&gt; 勾选完全控制权限</p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS 架構</title>
    <url>/2022/07/15/ros-filesys/</url>
    <content><![CDATA[<h3 id="ROS文件系統"><a href="#ROS文件系統" class="headerlink" title="ROS文件系統"></a>ROS文件系統</h3><p>ROS文件系统级指的是在硬盘上ROS源代码的组织形式，其结构大致可以如下图所示：</p>
<p><img src="/../images/posts/ros-filesys.assets/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WorkSpace --- 自定义的工作空间</span><br><span class="line"></span><br><span class="line">    |--- build:编译空间，用于存放CMake和catkin的缓存信息、配置信息和其他中间文件。</span><br><span class="line"></span><br><span class="line">    |--- devel:开发空间，用于存放编译后生成的目标文件，包括头文件、动态&amp;静态链接库、可执行文件等。</span><br><span class="line"></span><br><span class="line">    |--- src: 源码</span><br><span class="line"></span><br><span class="line">        |-- package：功能包(ROS基本单元)包含多个节点、库与配置文件，包名所有字母小写，只能由字母、数字与下划线组成</span><br><span class="line"></span><br><span class="line">            |-- CMakeLists.txt 配置编译规则，比如源文件、依赖项、目标文件</span><br><span class="line"></span><br><span class="line">            |-- package.xml 包信息，比如:包名、版本、作者、依赖项...(以前版本是 manifest.xml)</span><br><span class="line"></span><br><span class="line">            |-- scripts 存储python文件</span><br><span class="line"></span><br><span class="line">            |-- src 存储C++源文件</span><br><span class="line"></span><br><span class="line">            |-- include 头文件</span><br><span class="line"></span><br><span class="line">            |-- msg 消息通信格式文件</span><br><span class="line"></span><br><span class="line">            |-- srv 服务通信格式文件</span><br><span class="line"></span><br><span class="line">            |-- action 动作格式文件</span><br><span class="line"></span><br><span class="line">            |-- launch 可一次性运行多个节点 </span><br><span class="line"></span><br><span class="line">            |-- config 配置信息</span><br><span class="line"></span><br><span class="line">        |-- CMakeLists.txt: 编译的基本配置</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h4><p><code>launch</code>文件實質也是<code>xml</code>文件</p>
<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><blockquote>
<p>一个程序中可能需要启动多个节点，比如:ROS 内置的小乌龟案例，如果要控制乌龟运动，要启动多个窗口，分别启动 roscore、乌龟界面节点、键盘控制节点。如果每次都调用 rosrun 逐一启动，显然效率低下，如何优化?</p>
</blockquote>
<p>官方给出的优化策略是使用 launch 文件，可以一次性启动多个 ROS 节点。</p>
<h5 id="實現"><a href="#實現" class="headerlink" title="實現"></a>實現</h5><ol>
<li><p>在功能包下創建<code>launch</code>文件夾，通過在命令行輸入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir launch</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>launch</code>文件夾下，創建<code>launch</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim LAUNCH_NAME.launch</span><br></pre></td></tr></table></figure>
</li>
<li><p>編輯<code>launch</code>文件内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle_gui&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle_ctl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>node : 需要啓動的節點</p>
<p>pkg : 功能包</p>
<p>type : 被執行的節點文件</p>
<p>name : 節點名稱</p>
<p><strong>特别的</strong>，使用<code>launch</code>文件会默认启动<code>roscore</code>，不需要额外启动。</p>
</li>
<li><p>運行<code>launch</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch PKG_NAME LAUNCH_NAME.launch</span><br></pre></td></tr></table></figure>
</li>
<li><p>運行結果：<br>原來需要分別啓動的roscore、烏龜GUI和鍵盤控制節點，能夠一次性全部啓動。</p>
</li>
</ol>
<h4 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h4><p>该文件定义有关软件包的属性，例如软件包名称，版本号，作者，维护者以及对其他catkin软件包的依赖性。请注意，该概念类似于旧版 rosbuild 构建系统中使用的<em>manifest.xml</em>文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 格式: 以前是 1，推荐使用格式 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 包名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo01_hello_vscode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 描述信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The demo01_hello_vscode package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Example:  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;maintainer email=&quot;jane.doe@example.com&quot;&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 维护人员 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;xuzuo@todo.todo&quot;</span>&gt;</span>xuzuo<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Commonly used license strings: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 许可证信息，ROS核心组件默认 BSD --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Url tags are optional, but multiple are allowed, one per tag --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Optional attribute type can be: website, bugtracker, or repository --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Example: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;url type=&quot;website&quot;&gt;http://wiki.ros.org/demo01_hello_vscode&lt;/url&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Author tags are optional, multiple are allowed, one per tag --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Authors do not have to be maintainers, but could be --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Example: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;author email=&quot;jane.doe@example.com&quot;&gt;Jane Doe&lt;/author&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The *depend tags are used to specify dependencies --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Examples: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use depend as a shortcut for packages that are both build and exec dependencies --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;depend&gt;roscpp&lt;/depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   Note that this is equivalent to the following: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;build_depend&gt;roscpp&lt;/build_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;exec_depend&gt;roscpp&lt;/exec_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;build_depend&gt;message_generation&lt;/build_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use build_export_depend for packages you need in order to build against this package: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;build_export_depend&gt;message_generation&lt;/build_export_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use exec_depend for packages you need at runtime: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use doc_depend for packages you need only for building documentation: --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;doc_depend&gt;doxygen&lt;/doc_depend&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖的构建工具，这是必须的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定构建此软件包所需的软件包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定根据这个包构建库所需要的包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 运行该程序包中的代码所需的程序包 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- The export tag contains other, unspecified, tags --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Other tools can request additional information be placed here --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="CMakelists-txt"><a href="#CMakelists-txt" class="headerlink" title="CMakelists.txt"></a>CMakelists.txt</h4><p>文件<strong>CMakeLists.txt</strong>是CMake构建系统的输入，用于构建软件包。任何兼容CMake的软件包都包含一个或多个CMakeLists.txt文件，这些文件描述了如何构建代码以及将代码安装到何处。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0.2) #所需 cmake 版本</span><br><span class="line">project(demo01_hello_vscode) #包名称，会被 $&#123;PROJECT_NAME&#125; 的方式调用</span><br><span class="line"></span><br><span class="line">## Compile as C++11, supported in ROS Kinetic and newer</span><br><span class="line"># add_compile_options(-std=c++11)</span><br><span class="line"></span><br><span class="line">## Find catkin macros and libraries</span><br><span class="line">## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)</span><br><span class="line">## is used, also find other catkin packages</span><br><span class="line">#设置构建所需要的软件包</span><br><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">## System dependencies are found with CMake&#x27;s conventions</span><br><span class="line">#默认添加系统依赖</span><br><span class="line"># find_package(Boost REQUIRED COMPONENTS system)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Uncomment this if the package has a setup.py. This macro ensures</span><br><span class="line">## modules and global scripts declared therein get installed</span><br><span class="line">## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html</span><br><span class="line"># 启动 python 模块支持</span><br><span class="line"># catkin_python_setup()</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line">## Declare ROS messages, services and actions ##</span><br><span class="line">## 声明 ROS 消息、服务、动作... ##</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">## To declare and build messages, services or actions from within this</span><br><span class="line">## package, follow these steps:</span><br><span class="line">## * Let MSG_DEP_SET be the set of packages whose message types you use in</span><br><span class="line">##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).</span><br><span class="line">## * In the file package.xml:</span><br><span class="line">##   * add a build_depend tag for &quot;message_generation&quot;</span><br><span class="line">##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET</span><br><span class="line">##   * If MSG_DEP_SET isn&#x27;t empty the following dependency has been pulled in</span><br><span class="line">##     but can be declared for certainty nonetheless:</span><br><span class="line">##     * add a exec_depend tag for &quot;message_runtime&quot;</span><br><span class="line">## * In this file (CMakeLists.txt):</span><br><span class="line">##   * add &quot;message_generation&quot; and every package in MSG_DEP_SET to</span><br><span class="line">##     find_package(catkin REQUIRED COMPONENTS ...)</span><br><span class="line">##   * add &quot;message_runtime&quot; and every package in MSG_DEP_SET to</span><br><span class="line">##     catkin_package(CATKIN_DEPENDS ...)</span><br><span class="line">##   * uncomment the add_*_files sections below as needed</span><br><span class="line">##     and list every .msg/.srv/.action file to be processed</span><br><span class="line">##   * uncomment the generate_messages entry below</span><br><span class="line">##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)</span><br><span class="line"></span><br><span class="line">## Generate messages in the &#x27;msg&#x27; folder</span><br><span class="line"># add_message_files(</span><br><span class="line">#   FILES</span><br><span class="line">#   Message1.msg</span><br><span class="line">#   Message2.msg</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Generate services in the &#x27;srv&#x27; folder</span><br><span class="line"># add_service_files(</span><br><span class="line">#   FILES</span><br><span class="line">#   Service1.srv</span><br><span class="line">#   Service2.srv</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Generate actions in the &#x27;action&#x27; folder</span><br><span class="line"># add_action_files(</span><br><span class="line">#   FILES</span><br><span class="line">#   Action1.action</span><br><span class="line">#   Action2.action</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Generate added messages and services with any dependencies listed here</span><br><span class="line"># 生成消息、服务时的依赖包</span><br><span class="line"># generate_messages(</span><br><span class="line">#   DEPENDENCIES</span><br><span class="line">#   std_msgs</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line">## Declare ROS dynamic reconfigure parameters ##</span><br><span class="line">## 声明 ROS 动态参数配置 ##</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">## To declare and build dynamic reconfigure parameters within this</span><br><span class="line">## package, follow these steps:</span><br><span class="line">## * In the file package.xml:</span><br><span class="line">##   * add a build_depend and a exec_depend tag for &quot;dynamic_reconfigure&quot;</span><br><span class="line">## * In this file (CMakeLists.txt):</span><br><span class="line">##   * add &quot;dynamic_reconfigure&quot; to</span><br><span class="line">##     find_package(catkin REQUIRED COMPONENTS ...)</span><br><span class="line">##   * uncomment the &quot;generate_dynamic_reconfigure_options&quot; section below</span><br><span class="line">##     and list every .cfg file to be processed</span><br><span class="line"></span><br><span class="line">## Generate dynamic reconfigure parameters in the &#x27;cfg&#x27; folder</span><br><span class="line"># generate_dynamic_reconfigure_options(</span><br><span class="line">#   cfg/DynReconf1.cfg</span><br><span class="line">#   cfg/DynReconf2.cfg</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">###################################</span><br><span class="line">## catkin specific configuration ##</span><br><span class="line">## catkin 特定配置##</span><br><span class="line">###################################</span><br><span class="line">## The catkin_package macro generates cmake config files for your package</span><br><span class="line">## Declare things to be passed to dependent projects</span><br><span class="line">## INCLUDE_DIRS: uncomment this if your package contains header files</span><br><span class="line">## LIBRARIES: libraries you create in this project that dependent projects also need</span><br><span class="line">## CATKIN_DEPENDS: catkin_packages dependent projects also need</span><br><span class="line">## DEPENDS: system dependencies of this project that dependent projects also need</span><br><span class="line"># 运行时依赖</span><br><span class="line">catkin_package(</span><br><span class="line">#  INCLUDE_DIRS include</span><br><span class="line">#  LIBRARIES demo01_hello_vscode</span><br><span class="line">#  CATKIN_DEPENDS roscpp rospy std_msgs</span><br><span class="line">#  DEPENDS system_lib</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">###########</span><br><span class="line">## Build ##</span><br><span class="line">###########</span><br><span class="line"></span><br><span class="line">## Specify additional locations of header files</span><br><span class="line">## Your package locations should be listed before other locations</span><br><span class="line"># 添加头文件路径，当前程序包的头文件路径位于其他文件路径之前</span><br><span class="line">include_directories(</span><br><span class="line"># include</span><br><span class="line">  $&#123;catkin_INCLUDE_DIRS&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">## Declare a C++ library</span><br><span class="line"># 声明 C++ 库</span><br><span class="line"># add_library($&#123;PROJECT_NAME&#125;</span><br><span class="line">#   src/$&#123;PROJECT_NAME&#125;/demo01_hello_vscode.cpp</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Add cmake target dependencies of the library</span><br><span class="line">## as an example, code may need to be generated before libraries</span><br><span class="line">## either from message generation or dynamic reconfigure</span><br><span class="line"># 添加库的 cmake 目标依赖</span><br><span class="line"># add_dependencies($&#123;PROJECT_NAME&#125; $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)</span><br><span class="line"></span><br><span class="line">## Declare a C++ executable</span><br><span class="line">## With catkin_make all packages are built within a single CMake context</span><br><span class="line">## The recommended prefix ensures that target names across packages don&#x27;t collide</span><br><span class="line"># 声明 C++ 可执行文件</span><br><span class="line">add_executable(Hello_VSCode src/Hello_VSCode.cpp)</span><br><span class="line"></span><br><span class="line">## Rename C++ executable without prefix</span><br><span class="line">## The above recommended prefix causes long target names, the following renames the</span><br><span class="line">## target back to the shorter version for ease of user use</span><br><span class="line">## e.g. &quot;rosrun someones_pkg node&quot; instead of &quot;rosrun someones_pkg someones_pkg_node&quot;</span><br><span class="line">#重命名c++可执行文件</span><br><span class="line"># set_target_properties($&#123;PROJECT_NAME&#125;_node PROPERTIES OUTPUT_NAME node PREFIX &quot;&quot;)</span><br><span class="line"></span><br><span class="line">## Add cmake target dependencies of the executable</span><br><span class="line">## same as for the library above</span><br><span class="line">#添加可执行文件的 cmake 目标依赖</span><br><span class="line">add_dependencies(Hello_VSCode $&#123;$&#123;PROJECT_NAME&#125;_EXPORTED_TARGETS&#125; $&#123;catkin_EXPORTED_TARGETS&#125;)</span><br><span class="line"></span><br><span class="line">## Specify libraries to link a library or executable target against</span><br><span class="line">#指定库、可执行文件的链接库</span><br><span class="line">target_link_libraries(Hello_VSCode</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#############</span><br><span class="line">## Install ##</span><br><span class="line">## 安装 ##</span><br><span class="line">#############</span><br><span class="line"></span><br><span class="line"># all install targets should use catkin DESTINATION variables</span><br><span class="line"># See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html</span><br><span class="line"></span><br><span class="line">## Mark executable scripts (Python etc.) for installation</span><br><span class="line">## in contrast to setup.py, you can choose the destination</span><br><span class="line">#设置用于安装的可执行脚本</span><br><span class="line">catkin_install_python(PROGRAMS</span><br><span class="line">  scripts/Hi.py</span><br><span class="line">  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">## Mark executables for installation</span><br><span class="line">## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html</span><br><span class="line"># install(TARGETS $&#123;PROJECT_NAME&#125;_node</span><br><span class="line">#   RUNTIME DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Mark libraries for installation</span><br><span class="line">## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html</span><br><span class="line"># install(TARGETS $&#123;PROJECT_NAME&#125;</span><br><span class="line">#   ARCHIVE DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span><br><span class="line">#   LIBRARY DESTINATION $&#123;CATKIN_PACKAGE_LIB_DESTINATION&#125;</span><br><span class="line">#   RUNTIME DESTINATION $&#123;CATKIN_GLOBAL_BIN_DESTINATION&#125;</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Mark cpp header files for installation</span><br><span class="line"># install(DIRECTORY include/$&#123;PROJECT_NAME&#125;/</span><br><span class="line">#   DESTINATION $&#123;CATKIN_PACKAGE_INCLUDE_DESTINATION&#125;</span><br><span class="line">#   FILES_MATCHING PATTERN &quot;*.h&quot;</span><br><span class="line">#   PATTERN &quot;.svn&quot; EXCLUDE</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">## Mark other files for installation (e.g. launch and bag files, etc.)</span><br><span class="line"># install(FILES</span><br><span class="line">#   # myfile1</span><br><span class="line">#   # myfile2</span><br><span class="line">#   DESTINATION $&#123;CATKIN_PACKAGE_SHARE_DESTINATION&#125;</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">#############</span><br><span class="line">## Testing ##</span><br><span class="line">#############</span><br><span class="line"></span><br><span class="line">## Add gtest based cpp test target and link libraries</span><br><span class="line"># catkin_add_gtest($&#123;PROJECT_NAME&#125;-test test/test_demo01_hello_vscode.cpp)</span><br><span class="line"># if(TARGET $&#123;PROJECT_NAME&#125;-test)</span><br><span class="line">#   target_link_libraries($&#123;PROJECT_NAME&#125;-test $&#123;PROJECT_NAME&#125;)</span><br><span class="line"># endif()</span><br><span class="line"></span><br><span class="line">## Add folders to be run by python nosetests</span><br><span class="line"># catkin_add_nosetests(test)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ROS-Tools"><a href="#ROS-Tools" class="headerlink" title="ROS Tools"></a>ROS Tools</h3><h4 id="查找、安裝和刪除相關ROS功能包"><a href="#查找、安裝和刪除相關ROS功能包" class="headerlink" title="查找、安裝和刪除相關ROS功能包"></a>查找、安裝和刪除相關ROS功能包</h4><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt search ros-&lt;distro&gt;-&lt;package&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Notes</strong>:<code>&lt;distro&gt;</code>為ROS版本號，<code>&lt;package&gt;</code>為ROS包名。此外，ROS所有包名的命名格式都是<code>ros-&lt;distro&gt;-&lt;package&gt;</code>，即<code>ros-版本號-包名</code>；</p>
<p>列出所有可用的<code>ROS package</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt search ros-kinetic-*</span></span><br></pre></td></tr></table></figure>

<p>從中查找我們需要的包，如導航模塊中的<code>gmapping</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt search ros-kinetic-* | grep -i gmmaping</span></span><br></pre></td></tr></table></figure>

<h5 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install  ros-&lt;distro&gt;-&lt;package&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt purge ros-&lt;distro&gt;-&lt;package&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="roscore"><a href="#roscore" class="headerlink" title="roscore"></a>roscore</h4><p><code>roscore</code>是節點運行和通信的必要條件:</p>
<ul>
<li>ros master；</li>
<li>ros 参数服务器；</li>
<li>rosout 日志节点；</li>
</ul>
<p>用法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscore</span></span><br></pre></td></tr></table></figure>

<p>或指定端口号（不常用）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscore -p xxxx</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-filesys.assets/image-20220703203034222.png" alt="image-20220703203034222"></p>
<h4 id="rosrun"><a href="#rosrun" class="headerlink" title="rosrun"></a>rosrun</h4><p>用法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun &lt;package&gt; &lt;node&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosrun turtlesim turtlesim_node</span></span><br></pre></td></tr></table></figure>

<h4 id="roslaunch"><a href="#roslaunch" class="headerlink" title="roslaunch"></a>roslaunch</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roslaunch &lt;package&gt; &lt;launch&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="catkin-create-pkg"><a href="#catkin-create-pkg" class="headerlink" title="catkin_create_pkg"></a>catkin_create_pkg</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catkin_create_pkg &lt;package&gt; &lt;dependencies&gt;</span><br></pre></td></tr></table></figure>

<h4 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a>rospack</h4><p><strong>作用</strong>：獲取<code>packages</code>相關信息；</p>
<p><code>rospack find</code>可以獲取<code>package</code>的路徑信息。下面將簡單演示<code>rospack find</code>的使用。</p>
<p>用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rospack find [package]</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rospack find roscpp</span></span><br></pre></td></tr></table></figure>

<p>將會返回以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROS_INSTALL_PATH/share/roscpp</span><br></pre></td></tr></table></figure>

<p>如果是在<code>Ubuntu</code>下安裝的<code>ROS Kinetic</code>，將返回以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/ros/kinetic/share/roscpp</span><br></pre></td></tr></table></figure>

<h4 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a>roscd</h4><p><strong>作用</strong>：直接切換到<code>ROS package</code>的路徑下；</p>
<h5 id="ROS-package-根目錄"><a href="#ROS-package-根目錄" class="headerlink" title="ROS package 根目錄"></a>ROS package 根目錄</h5><p>用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd &lt;package-or-stack&gt;[/subdir]</span></span><br></pre></td></tr></table></figure>

<p>切換到<code>roscpp</code>包下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd roscpp</span></span><br></pre></td></tr></table></figure>

<p>爲了驗證確實切換到了<code>roscpp</code>下，輸入<code>pwd</code>打印當前路徑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure>

<p>可以發現，這一路徑與<code>rospack find</code>給出的路徑是一樣的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROS_INSTALL_PATH/share/roscpp</span><br></pre></td></tr></table></figure>

<p><strong>Notes</strong>：與其他<code>ROS Tools</code>一樣，<code>roscd</code>只會查找<code>ROS_PACKAGE_PATH</code>中列出的目录中的 <code>ROS package</code>。輸入以下命令可查看當前<code>ROS_PACKAGE_PATH</code>内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span></span><br></pre></td></tr></table></figure>

<p>在<code>Ubuntu</code>下安裝的<code>ROS Kinetic</code>通常能夠收到以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/ros/kinetic/share</span><br></pre></td></tr></table></figure>

<p>與其他環境變量一樣的是，可以向<code>ROS_PACKAGE_PATH</code>添加其他目錄，不同路徑用 <code>:</code> 分割。</p>
<h5 id="ROS-package-子目錄"><a href="#ROS-package-子目錄" class="headerlink" title="ROS package 子目錄"></a>ROS package 子目錄</h5><p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd roscpp/cmake</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure>

<p>返回以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROS_INSTALL_PATH/share/roscpp/cmake</span><br></pre></td></tr></table></figure>

<h5 id="roscd-log"><a href="#roscd-log" class="headerlink" title="roscd log"></a>roscd log</h5><p><code>roscd log</code>將切換到ROS日志文件的存放路徑。</p>
<p><strong>Notes</strong>：如果在此之前尚未運行過任何ROS節點，將返回錯誤信息并表示路徑不存在。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>

<h4 id="rosls"><a href="#rosls" class="headerlink" title="rosls"></a>rosls</h4><p><strong>作用</strong>：通過<code>ROS package</code>名稱即可列出其子目錄，而不需要完整的路徑；</p>
<p>用法:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosls &lt;package-or-stack&gt;[/subdir]</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosls roscpp_tutorials</span></span><br></pre></td></tr></table></figure>

<p>收到以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake launch package.xml  srv</span><br></pre></td></tr></table></figure>

<h4 id="Tab-補全（Tab-completion）"><a href="#Tab-補全（Tab-completion）" class="headerlink" title="Tab 補全（Tab-completion）"></a>Tab 補全（Tab-completion）</h4><p>輸入完整的<code>package</code>名稱是一件冗長乏味的事情。在前面的例子中，<code>roscpp_tutorials</code>無疑是一個相當長的名字了。所幸的是，一些ROS工具支持Tab補全。</p>
<p>可以輸入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd roscpp_tut&lt;&lt;&lt; <span class="string">now push the TAB key &gt;&gt;&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然後按下<code>TAB</code>鍵，命令行就會補全剩下的部分：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd roscpp_tutorials/</span></span><br></pre></td></tr></table></figure>

<p>當然，這是因爲在在當前<code>ROS package</code>中，僅有<code>roscpp_tutorials</code>以<code>roscpp_tut</code>開頭。</p>
<p>現在我們嘗試輸入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd tur&lt;&lt;&lt; <span class="string">now push the TAB key &gt;&gt;&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>按下<code>TAB</code>鍵后，命令行内容可能將補充至以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd turtle</span></span><br></pre></td></tr></table></figure>

<p>然而，當前有多個<code>packages</code>以<code>turtle</code>開頭。再次按下<code>TAB</code>鍵，將會輸出所有以<code>turtle</code>開頭的<code>ROS package</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">turtle_actionlib/  turtlesim/ turtle_tf/</span><br></pre></td></tr></table></figure>

<p>然后，命令行仍然顯示如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd turtle</span></span><br></pre></td></tr></table></figure>

<p>如果想要定位到<code>turtlesim/ </code>，則需要至少再繼續在<code>turtle</code>後面輸入一個<code>s</code>，然後按下<code>TAB</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd turtles&lt;&lt;&lt; <span class="string">now push the TAB key &gt;&gt;&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>當僅有一個<code>package</code>以<code>turtles</code>開頭時, 將出現以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">roscd turtlesim/</span></span><br></pre></td></tr></table></figure>

<p>如果想看到當前所有的以安裝<code>packages</code>的列表，可以在<code>rosls</code>后，連續點擊兩次<code>TAB</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosls &lt;&lt;&lt; <span class="string">now push the TAB key twice &gt;&gt;&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="rosed"><a href="#rosed" class="headerlink" title="rosed"></a>rosed</h4><p>需要安裝<code>vim</code>，用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosed &lt;package&gt; &lt;file&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rosed turtlesim Color.msg</span></span><br></pre></td></tr></table></figure>

<h4 id="幫助"><a href="#幫助" class="headerlink" title="幫助"></a>幫助</h4><p>當不明確<code>ROS Tools</code>使用規則時，可以在命令後鍵入<code>-h</code>獲得使用説明，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rospack -h</span></span><br></pre></td></tr></table></figure>

<p>命令行將顯示如下内容：</p>
<p><img src="/../images/posts/ros-filesys.assets/image-20220703170334323.png" alt="image-20220703170334323"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem">ROS&#x2F;Tutorials&#x2F;NavigatingTheFilesystem - ROS Wiki</a></li>
<li><a href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/15-ben-zhang-xiao-jie.html">1.5 ROS架构 · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a></li>
</ol>
]]></content>
      <categories>
        <category>ROS</category>
        <category>beginner-tutorials</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS HelloWorld</title>
    <url>/2022/07/15/ros-hello-world/</url>
    <content><![CDATA[<p>编写ROS的第一个程序，实现流程大致如下：</p>
<ol>
<li>创建工作空间；</li>
<li>创建功能包；</li>
<li>编写源文件；</li>
<li>编辑配置文件；</li>
<li>编译、执行；</li>
</ol>
<h2 id="1-创建工作空间并初始化"><a href="#1-创建工作空间并初始化" class="headerlink" title="1 创建工作空间并初始化"></a>1 创建工作空间并初始化</h2><p>创建含有<code>src</code>目录的工作空间，切换到工作空间下，<code>catkin_make</code>编译完成初始化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create workspace folder</span></span><br><span class="line">mkdir -p WORKSPACE_NAME/src</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到工作空间下</span></span><br><span class="line">cd WORKSPACE_NAME/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 可以视为初始化工作空间</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<h2 id="2-创建功能包并添加依赖"><a href="#2-创建功能包并添加依赖" class="headerlink" title="2 创建功能包并添加依赖"></a>2 创建功能包并添加依赖</h2><p>切换到工作空间的<code>src</code>目录下，使用<code>catkin_create_pkg</code>创建功能包并添加依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到工作空间下的src</span></span><br><span class="line">cd WORKSPACE_NAME/src</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建功能包</span></span><br><span class="line">catkin_create_pkg PKG_NAME roscpp rospy std_msgs</span><br></pre></td></tr></table></figure>

<p>该功能包添加的依赖为<code>roscpp</code>、<code>rospy</code>和<code>std_msgs</code>，<code>roscpp</code>表示使用C++实现的库，<code>rospy</code>表示使用Python实现的库，<code>std_msgs</code>为标准消息库。功能包通常都会依赖这三个库实现。</p>
<h2 id="3-编写源文件"><a href="#3-编写源文件" class="headerlink" title="3 编写源文件"></a>3 编写源文件</h2><p>在ROS中，虽然实现同一功能时，C++和Python可以互换，但是具体选择哪种语言，需要视需求而定，因为两种语言相较而言:C++运行效率高但是编码效率低，而Python则反之，基于二者互补的特点，ROS设计者分别设计了<code>roscpp</code>与<code>rospy</code>库，前者旨在成为ROS的高性能库，而后者则一般用于对性能无要求的场景，旨在提高开发效率。</p>
<h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><p>使用<code>vim</code>创建并打开<code>cpp</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在功能包的src目录下创建C++文件并打开</span></span><br><span class="line">vim WORKSPACE_NAME/src/PKG_NAME/src/hello_world.cpp</span><br></pre></td></tr></table></figure>

<p>编辑相关源代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;ros/ros.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">	// ros node init</span><br><span class="line">	// arg3 为 node 节点名</span><br><span class="line">	ros::init(argc, argv, &quot;hello_world_node&quot;);</span><br><span class="line">	// print &quot;hello world&quot;</span><br><span class="line">	ROS_INFO(&quot;hello world!&quot;);</span><br><span class="line">	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><p>使用<code>vim</code>创建并打开<code>python</code>文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在功能包目录下创建scripts文件夹</span></span><br><span class="line">mkdir WORKSPACE_NAME/src/PKG_NAME/scripts/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在功能包的scripts目录下创建C++文件并打开</span></span><br><span class="line">vim WORKSPACE_NAME/src/PKG_NAME/scripts/hello_world.py</span><br></pre></td></tr></table></figure>

<p>编辑相关源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;hello_world_node_py&quot;</span>)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Hello World! --python&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>为<code>python</code>文件添加可执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x PYTHON_NAME.py</span><br></pre></td></tr></table></figure>



<h2 id="4-编辑功能包下的CMakelist-txt文件"><a href="#4-编辑功能包下的CMakelist-txt文件" class="headerlink" title="4 编辑功能包下的CMakelist.txt文件"></a>4 编辑功能包下的<code>CMakelist.txt</code>文件</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello_world 为可执行程序的名字，可随意命名，一般为源文件名去掉后缀</span></span><br><span class="line">add_executable(hello_world_exe</span><br><span class="line">	src/hello_world.cpp</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello_world 为上面可执行程序的名字</span></span><br><span class="line">target_link_libearies(hello_world_exe</span><br><span class="line"><span class="meta prompt_">	$</span><span class="language-bash">&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catkin_install_python(PROGRAMS scripts/PYTHON_NAME.py</span><br><span class="line">	DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="5-编译并执行"><a href="#5-编译并执行" class="headerlink" title="5 编译并执行"></a>5 编译并执行</h2><p>切换进入工作空间，使用<code>catkin_make</code>编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换进入工作空间</span></span><br><span class="line">cd WORKSPACE_NAME/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<p>执行，需要打开两个命令窗口：</p>
<p>第一个命令窗口，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 ROS Master 节点</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p>再开一个窗口，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到工作空间下</span></span><br><span class="line">cd WORKSPACE_NAME/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置环境变量</span></span><br><span class="line">source ./devel/setup.bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cpp文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 ROS 节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PKG_NAME 为功能包名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPP_NODE_NAME 为 ROS 节点名，即可执行程序的名字（hello_world）</span></span><br><span class="line">rosrun PKG_NAME CPP_EXE_NAME</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或 Python 文件</span></span><br><span class="line">rosrun PKG_NAME PYTHON_NAME.py</span><br></pre></td></tr></table></figure>

<p>输入完，回车就能在命令行看见输出：<strong>Hello World ！</strong></p>
<p>**Tips : **</p>
<p><code>source ~/工作空间/devel/setup.bash</code>可以添加进<code>.bashrc</code>文件，使用上更方便</p>
<p>添加方式1 : 直接使用 gedit 或 vi 编辑 .bashrc 文件，最后添加该内容</p>
<p>添加方式2 : <code>echo &quot;source ~/工作空间/devel/setup.bash&quot; &gt;&gt; ~/.bashrc</code></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/13-rosji-cheng-kai-fa-huan-jing-da-jian/131-helloworldshi-xian-jian-jie.html">1.3.1 HelloWorld实现简介 · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a></li>
</ol>
]]></content>
      <categories>
        <category>ROS</category>
        <category>beginner-tutorials</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS 集成开发环境搭建</title>
    <url>/2022/07/15/ros-ide-config/</url>
    <content><![CDATA[<p>和大多数开发环境一样，理论上，在 ROS 中，只需要记事本就可以编写基本的 ROS 程序，但是工欲善其事必先利其器，为了提高开发效率，可以先安装集成开发工具和使用方便的工具 : 终端、IDE….</p>
<h3 id="終端Terminator安裝"><a href="#終端Terminator安裝" class="headerlink" title="終端Terminator安裝"></a>終端Terminator安裝</h3><p>在 ROS 中，需要频繁的使用到终端，且可能需要同时开启多个窗口，推荐一款较为好用的终端:<strong>Terminator。</strong>效果如下:</p>
<p><img src="/../images/posts/ros-IDE-config.assets/terminator%E6%95%88%E6%9E%9C.PNG" alt="img"></p>
<h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure>

<h4 id="添加到收藏夾"><a href="#添加到收藏夾" class="headerlink" title="添加到收藏夾"></a>添加到收藏夾</h4><p>顯示應用程序 —- 搜索 terminator —- 右擊選擇 添加到收藏夾</p>
<h4 id="常用快捷鍵"><a href="#常用快捷鍵" class="headerlink" title="常用快捷鍵"></a>常用快捷鍵</h4><p><strong>第一部分：關於在同一個標簽内的操作</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alt+Up                          //移动到上面的终端</span><br><span class="line">Alt+Down                        //移动到下面的终端</span><br><span class="line">Alt+Left                        //移动到左边的终端</span><br><span class="line">Alt+Right                       //移动到右边的终端</span><br><span class="line">Ctrl+Shift+O                    //水平分割终端</span><br><span class="line">Ctrl+Shift+E                    //垂直分割终端</span><br><span class="line">Ctrl+Shift+Right                //在垂直分割的终端中将分割条向右移动</span><br><span class="line">Ctrl+Shift+Left                 //在垂直分割的终端中将分割条向左移动</span><br><span class="line">Ctrl+Shift+Up                   //在水平分割的终端中将分割条向上移动</span><br><span class="line">Ctrl+Shift+Down                 //在水平分割的终端中将分割条向下移动</span><br><span class="line">Ctrl+Shift+S                    //隐藏/显示滚动条</span><br><span class="line">Ctrl+Shift+F                    //搜索</span><br><span class="line">Ctrl+Shift+C                    //复制选中的内容到剪贴板</span><br><span class="line">Ctrl+Shift+V                    //粘贴剪贴板的内容到此处</span><br><span class="line">Ctrl+Shift+W                    //关闭当前终端</span><br><span class="line">Ctrl+Shift+Q                    //退出当前窗口，当前窗口的所有终端都将被关闭</span><br><span class="line">Ctrl+Shift+X                    //最大化显示当前终端</span><br><span class="line">Ctrl+Shift+Z                    //最大化显示当前终端并使字体放大</span><br><span class="line">Ctrl+Shift+N or Ctrl+Tab        //移动到下一个终端</span><br><span class="line">Ctrl+Shift+P or Ctrl+Shift+Tab  //Crtl+Shift+Tab 移动到之前的一个终端</span><br></pre></td></tr></table></figure>

<p><strong>第二部份：有关各个标签之间的操作</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F11                             //全屏开关</span><br><span class="line">Ctrl+Shift+T                    //打开一个新的标签</span><br><span class="line">Ctrl+PageDown                   //移动到下一个标签</span><br><span class="line">Ctrl+PageUp                     //移动到上一个标签</span><br><span class="line">Ctrl+Shift+PageDown             //将当前标签与其后一个标签交换位置</span><br><span class="line">Ctrl+Shift+PageUp               //将当前标签与其前一个标签交换位置</span><br><span class="line">Ctrl+Plus (+)                   //增大字体</span><br><span class="line">Ctrl+Minus (-)                  //减小字体</span><br><span class="line">Ctrl+Zero (0)                   //恢复字体到原始大小</span><br><span class="line">Ctrl+Shift+R                    //重置终端状态</span><br><span class="line">Ctrl+Shift+G                    //重置终端状态并clear屏幕</span><br><span class="line">Super+g                         //绑定所有的终端，以便向一个输入能够输入到所有的终端</span><br><span class="line">Super+Shift+G                   //解除绑定</span><br><span class="line">Super+t                         //绑定当前标签的所有终端，向一个终端输入的内容会自动输入到其他终端</span><br><span class="line">Super+Shift+T                   //解除绑定</span><br><span class="line">Ctrl+Shift+I                    //打开一个窗口，新窗口与原来的窗口使用同一个进程</span><br><span class="line">Super+i                         //打开一个新窗口，新窗口与原来的窗口使用不同的进程</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="VScode安裝"><a href="#VScode安裝" class="headerlink" title="VScode安裝"></a>VScode安裝</h3><h4 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h4><p>vscode linux64下载:<a href="https://code.visualstudio.com/docs/?dv=linux64_deb">https://code.visualstudio.com/docs/?dv=linux64_deb</a></p>
<p>历史版本: <a href="https://code.visualstudio.com/updates">https://code.visualstudio.com/updates</a></p>
<h4 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i xxxx.deb</span><br></pre></td></tr></table></figure>

<h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg --purge  code</span><br></pre></td></tr></table></figure>

<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p><code>C/C++</code>、<code>CMake Tools</code>、<code>Python</code>、<code>ROS</code></p>
<p><img src="/../images/posts/ros-IDE-config.assets/image-20220702144712035.png" alt="image-20220702144712035"></p>
<h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>个人认为除了以上插件，仅需要添加ROS头文件路径保证代码补全即可，以提升coding效率。</p>
<p>具体打开工作空间下<code>.vscode/c_cpp_properties.json</code>文件，在<code>includePath</code>中添加安装的ROS的路径即可。</p>
<p>如需更多配置，可参考：<a href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/14-ros-ji-cheng-kai-fa-huan-jing-da-jian/142-an-zhuang-vscode.html">VScode ROS 配置</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">// 将 kinetic 更换为自己安装的 ROS 版本即可</span></span><br><span class="line">                <span class="string">&quot;/opt/ros/kinetic/include/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-gcc-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-IDE-config.assets/image-20220702154100502.png" alt="image-20220702154100502"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/14-ros-ji-cheng-kai-fa-huan-jing-da-jian.html">1.4 ROS集成开发环境搭建 · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a></li>
</ol>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>ROS-IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS Overview</title>
    <url>/2022/07/15/ros-overview/</url>
    <content><![CDATA[<p>ROS（<em>Robot Operating System</em>）提供了一系列的 <strong>库</strong> 和 <strong>开发工具</strong> 以帮助开发者更好的创建机器人应用，包括硬件抽象、设备驱动、库文件、可视化工具、消息传递以及包管理等。ROS基于BSD开源许可。</p>
<h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>ROS是一个由来已久、贡献者众多的大型软件项目。在ROS诞生之前，很多学者认为，机器人研究需要一个开放式的协作框架，并且已经有不少类似的项目致力于实现这样的框架。在这些工作中，斯坦福大学在2000年年中开展了一系列相关研究项目，如斯坦福人工智能机器人（STandford AI Robot, STAIR）项目、个人机器人（Personal Robots, PR）项目等，在上述项目中，在研究具有代表性、集成式人工智能系统的过程中，创立了用于室内场景的高灵活性、动态软件系统，其可以用于机器人学研究。</p>
<p>2007年，柳树车库（Willow Garage）提供了大量资源，用于将斯坦福大学项目中的软件系统进行扩展与完善，同时，在无数研究人员的共同努力下，ROS的核心思想和基本软件包逐渐得到完善。</p>
<h3 id="What-is-ROS"><a href="#What-is-ROS" class="headerlink" title="What is ROS?"></a>What is ROS?</h3><p>ROS 是一个为机器人设计的<strong>开源</strong>的<strong>元操作系统</strong>。它提供了与操作系统类似的服务，包括硬件抽象、底层设备控制、常用功能的实现、进程间通信和功能包管理。实际上，可以将ROS 看作一个 SDK(software development kit)，提供提供了用于在多主机上获取、生成、编写和运行代码的工具和库。</p>
<p>ROS 的主要目标是为机器人研究和开发提供代码复用的支持。ROS是一个分布式的进程（也就是“节点”）框架，这些进程被封装在易于被分享和发布的程序包和功能包中。ROS也支持一种类似于代码储存库的联合系统，这个系统也可以实现工程的协作及发布。这个设计可以使一个工程的开发和实现从文件系统到用户接口完全独立决策（不受ROS限制）。同时，所有的工程都可以被ROS的基础工具整合在一起。</p>
<p><img src="/../images/posts/ros-overview.assets/ros-equation.png" alt="img"></p>
<p>ROS设计者将ROS表述为“ROS &#x3D; Plumbing + Tools + Capabilities + Community”，即ROS是通讯机制、工具软件包、机器人高层技能以及机器人社区的集合体。</p>
<p><strong>通信机制（Plumbing）</strong>：ROS提供了一种发布-订阅式的通信框架用以简单、快速地构建分布式计算系。</p>
<p><strong>工具（Tools）</strong>：ROS提供了大量的工具组合用以配置、启动、自检、调试、可视化、登录、测试、终止分布式计算系统。</p>
<p><strong>强大的库（Capabilities）</strong>：ROS提供了广泛的库文件实现以机动性、操作控制、感知为主的机器人功能。</p>
<p><strong>开源社区（Community）</strong>：ROS的支持与发展依托着一个强大的社区。ros.org尤其关注兼容性和支持文档，提供了一套“一站式”的方案使得用户得以搜索并学习来自全球开发者数以千计的ROS程序包。</p>
<h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><p> ROS 的目标并不是成为多功能的框架，而是希望在机器人研发过程中，代码复用、技术共享以及协同开发。</p>
<p><img src="/../images/posts/ros-overview.assets/image-20220711173816466.png" alt="image-20220711173816466"></p>
<p><strong>代码复用（reuse）</strong>：支持机器人研发过程中代码复用。</p>
<p><strong>分布式框架（distributed framework）</strong>：分布式运行保证系统中各节点的松耦合，独立开发实现节点功能以提高开发效率。</p>
<p><strong>精简（thin）</strong>：ROS 被设计为尽可能精简，以便为 ROS 编写的代码可以与其他机器人软件框架一起使用。即 ROS 很容易与其他机器人软件框架集成：ROS 已经与 Open RAVE、Orocos 和 Player 集成。</p>
<p><strong>与 ROS 无关的库（ROS-agnostic libraries）</strong>：首选的开发模型是编写具有干净功能接口的与 ROS 无关的库。这样就算脱离 ROS ，仍然可以在其他机器人框架或者平台上完成相应功能。</p>
<p><strong>语言独立性（language independence）</strong>：ROS 框架很容易用任何现代编程语言实现。可以使用 Python、C++ 和 Lisp 编码实现，并且有 Java 和 Lua 的支持计划。</p>
<p><strong>易于测试（easy testing）</strong>：ROS 有一个称为 rostest 的内置单元&#x2F;集成测试框架，可以轻松启动和拆除测试夹具。</p>
<p><strong>可扩展性（scaling）</strong>：ROS 适用于大型运行时系统和大型开发过程。</p>
<h3 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h3><p>核心 ROS 系统以及有用的工具和库会定期作为 ROS 发行版发布。ROS的发行版类似于 Linux 发行版，并提供一组兼容的软件供开发者使用和构建。推出ROS发行版本的目的在于使开发人员可以使用相对稳定的代码库，直到其准备好将所有内容进行版本升级为止。因此，每个发行版本推出后，ROS开发者通常仅对这一版本的bug进行修复，同时提供少量针对核心软件包的改进。</p>
<p>版本特点: 按照英文字母顺序命名，ROS 目前已经发布了ROS1 的终极版本: noetic，并建议后期过渡至 ROS2 版本。noetic 版本之前默认使用的是 Python2，noetic 支持 Python3。</p>
<p>建议版本: noetic 或 melodic 或 kinetic</p>
<p><img src="/../images/posts/ros-overview.assets/%E7%89%88%E6%9C%AC.png" alt="img"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><p><a href="http://wiki.ros.org/">wiki.ros.org</a></p>
</li>
<li><p><a href="https://www.ros.org/">ROS: Home</a></p>
</li>
<li><p><a href="https://baike.baidu.com/item/ros/4710560">ros（机器人操作系统）_百度百科 (baidu.com)</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS Installation</title>
    <url>/2022/06/30/ros-installation/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们使用的是 ROS 版本是 <strong>Kinetic</strong>，下面内容是，官方给出的对于<strong>Kinetic</strong>支持平台的说名，大致意思就是，用<strong>ubuntu16.04</strong>。</p>
<blockquote>
<p>ROS Kinetic Kame is primarily targeted at the Ubuntu 16.04 (Xenial) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees. For more information on compatibility on other platforms, please see REP 3: Target Platforms. It will also support Ubuntu 15.10 Wily and Debian Jessie.</p>
</blockquote>
<p>ubuntu安装常用方式有两种:</p>
<p><strong>方案</strong>1：安装虚拟机（可以安装<strong>VMware</strong>或<strong>VirtualBox</strong>）</p>
<p>在这一方案中，我们按照先后顺序依次安装<strong>VMware 16</strong>、<strong>Ubuntu 16</strong>和，大致流程如下:</p>
<ol>
<li>安装虚拟机软件(比如：virtualbox 或 VMware)；</li>
<li>使用虚拟机软件虚拟一台主机；</li>
<li>在虚拟主机上安装 ubuntu 16.04；</li>
<li>在 ubuntu 上安装 ROS Kinetic Kame；</li>
<li>测试 ROS Kinetic Kame环境是否可以正常运行。</li>
</ol>
<p><strong>方案</strong>2：安装双系统（在基础学习阶段，双系统安装没有必要，本文暂不予介绍）；</p>
<p>两种方式比较，各有优缺点：</p>
<ul>
<li><p>方案1可以方便的实现 windows 与 ubuntu 交互，不过性能稍差，且与硬件交互不便；</p>
</li>
<li><p>方案2可以保证性能，且不需要考虑硬件兼容性问题，但是和windows系统交互不便。</p>
</li>
</ul>
<p>在 ROS 中，一些仿真操作是比较耗费系统资源的，且经常需要和一些硬件(雷达、摄像头、imu、STM32、arduino….)交互，因此，原则上建议采用方案2，不过如果只是出于学习目的，那么方案1也基本够用，且方案1在windows与ubuntu的交互上更为方便，对于学习者更为友好。</p>
<h2 id="VMware-Workstation-16-Pro-安装"><a href="#VMware-Workstation-16-Pro-安装" class="headerlink" title="VMware Workstation 16 Pro 安装"></a>VMware Workstation 16 Pro 安装</h2><h3 id="VMware下载"><a href="#VMware下载" class="headerlink" title="VMware下载"></a>VMware下载</h3><p>点击下方链接下载</p>
<p>官方网址：<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">Download VMware Workstation Pro</a></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624161947876.png" alt="image-20220624161947876"></p>
<h3 id="VMware安装"><a href="#VMware安装" class="headerlink" title="VMware安装"></a>VMware安装</h3><p>下载完成后，双击 <strong>.exe</strong>  文件运行，点击<strong>下一步</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624161041508.png" alt="image-20220624161041508"></p>
<p>直到出现如下界面，将<strong>两者勾选</strong>，<strong>增强型键盘驱动程序</strong> ，可更好地处理国际键盘和带有额外按键的键盘。<strong>更改安装位置</strong>，默认为C盘，建议更改到其他盘符，且路径不含中文，点击下一步。</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624161433305.png" alt="image-20220624161433305"></p>
<p>通常我都会取消更新计划，因为官方更新可能出现兼容性等问题，问题不大，可以根据个人喜好决定，然后下一步。</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624161803068.png" alt="image-20220624161803068"></p>
<p>一直点击下一步，直到安装完成。</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624161830994.png" alt="image-20220624161830994"></p>
<p>安装成功后点击 <strong>许可证</strong> 输入密钥激活软件。</p>
<p>密钥查询：<a href="https://zhidao.baidu.com/question/432413156276109052.html">求vmware workstation 16激活密钥_百度知道 </a></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624162101220.png" alt="image-20220624162101220"></p>
<p>重启电脑，安装完成</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624163430664.png" alt="image-20220624163430664"></p>
<h2 id="Ubuntu-16-04-安装"><a href="#Ubuntu-16-04-安装" class="headerlink" title="Ubuntu 16.04 安装"></a>Ubuntu 16.04 安装</h2><h3 id="一、镜像下载"><a href="#一、镜像下载" class="headerlink" title="一、镜像下载"></a>一、镜像下载</h3><p>Ubuntu镜像：<a href="http://mirrors.163.com/ubuntu-releases/16.04/">Index of &#x2F;ubuntu-releases&#x2F;16.04&#x2F; (163.com)</a></p>
<p>建议选后一个</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624172147792.png" alt="image-20220624172147792"></p>
<h3 id="二、Ubuntu安装教程"><a href="#二、Ubuntu安装教程" class="headerlink" title="二、Ubuntu安装教程"></a>二、Ubuntu安装教程</h3><h4 id="1-创建新虚拟机，加载iso文件"><a href="#1-创建新虚拟机，加载iso文件" class="headerlink" title="1. 创建新虚拟机，加载iso文件"></a>1. 创建新虚拟机，加载iso文件</h4><p><strong>创建新的虚拟机</strong>，选择<strong>自定义（高级）</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624205807301.png" alt="image-20220624205807301"></p>
<p>选择<strong>Workstation 16.x</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624210717494.png" alt="image-20220624210717494"></p>
<p>选择<strong>稍后安装操作系统</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624212921852.png" alt="image-20220624212921852"></p>
<p>客户机操作系统选择<strong>Linux</strong>，版本<strong>Ubuntu 64位</strong>（因为下载的是64位操作系统，如果是32位，选择Ubuntu），点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624212941856.png" alt="image-20220624212941856"></p>
<p>输入<strong>虚拟机名称</strong>和<strong>安装位置</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213000558.png" alt="image-20220624213000558"></p>
<p><strong>处理器配置</strong>，按照个人电脑情况配置即可（会实际占用CPU），这里我们分配 <strong>2</strong> 个就可以了，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213033625.png" alt="image-20220624213033625"></p>
<p><strong>虚拟机内存分配</strong>，同样根据个人电脑分配即可，在此我们分配<strong>4GB</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213044824.png" alt="image-20220624213044824"></p>
<p><strong>网络类型</strong>的网络连接选择<strong>NAT（网络地址转换）</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213056954.png" alt="image-20220624213056954"></p>
<p><strong>连接I&#x2F;O控制器类型</strong>，选择默认即可，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213105948.png" alt="image-20220624213105948"></p>
<p><strong>选择磁盘类型</strong>，选择默认即可，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213118281.png" alt="image-20220624213118281"></p>
<p><strong>选择磁盘</strong>，选择默认即可，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213352047.png" alt="image-20220624213352047"></p>
<p><strong>指定磁盘容量</strong>，设定最大磁盘大小，由于会占用电脑实际存储空间且ROS会占用较多空间，尽量设置<strong>60GB以上</strong>，同时选择<strong>将虚拟磁盘存储为的单个文件</strong>，点击下一步</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220624213735150.png" alt="image-20220624213735150"></p>
<p><strong>指定磁盘文件</strong>，选择磁盘存储的位置</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625135537431.png" alt="image-20220625135537431"></p>
<p>选择<strong>自定义硬件</strong>，选择<strong>系统镜像路径</strong>。</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625135841860.png" alt="image-20220625135841860"></p>
<p>点击<strong>新CD&#x2F;DVD(SATA)<strong>，选择</strong>使用ISO映像文件</strong>，找到文件路径，关闭，完成</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625140048855.png" alt="image-20220625140048855"></p>
<p><strong>开启此虚拟机</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625140358583.png" alt="image-20220625140358583"></p>
<h4 id="2-Ubuntu安装"><a href="#2-Ubuntu安装" class="headerlink" title="2. Ubuntu安装"></a>2. Ubuntu安装</h4><p>语言选择，建立选择<strong>English</strong>，为了方便阅读也可以选择<strong>简体中文</strong>，然后点击<strong>Install Ubuntu</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625140625359.png" alt="image-20220625140625359"></p>
<p>安装准备，建议不勾选，点击<strong>continue</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625140845690.png" alt="image-20220625140845690"></p>
<p>安装类型，选择<strong>第一个选项即可</strong>，点击<strong>continue</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141302318.png" alt="image-20220625141302318"></p>
<p>点击<strong>continue</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141324509.png" alt="image-20220625141324509"></p>
<p>选择<strong>上海</strong>，点击<strong>continue</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141433237.png" alt="image-20220625141433237"></p>
<p>键盘布局，默认选择即可，点击<strong>continue</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141511636.png" alt="image-20220625141511636"></p>
<p>输入相关内容，随便输入，密码尽量短，方便使用（因为Linux很多操作需要管理员权限，需要输入密码）</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141818057.png" alt="image-20220625141818057"></p>
<p>等待安装完成即可</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625141903126.png" alt="image-20220625141903126"></p>
<p>安装完成，重启</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625143831523.png" alt="image-20220625143831523"></p>
<p>重启完成</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625144704473.png" alt="image-20220625144704473"></p>
<h4 id="3-安装VMware-Tools"><a href="#3-安装VMware-Tools" class="headerlink" title="3. 安装VMware Tools"></a>3. 安装VMware Tools</h4><p><strong>虚拟机</strong> —-&gt; <strong>安装VMware Tools</strong></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625145255202.png" alt="image-20220625145255202"></p>
<p>定位到压缩包位置</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625145828863.png" alt="image-20220625145828863"></p>
<p>使用 <code>cp 包名 ~/Downloads</code> 拷贝到家目录下</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625150923223.png" alt="image-20220625150923223"></p>
<p><code>cd ~/Downloads</code> 切换到压缩包所在路径</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625151007172.png" alt="image-20220625151007172"></p>
<p> <code>tar -xvf 安装包名</code> 解压</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625151040604.png" alt="image-20220625151040604"></p>
<p>解压完成，<code>cd vmware-tools-distrib </code>切换到解压完成的目录下，<code>ls</code>查看当前目录，找到<code>vmware-install-pl</code><strong>(绿色表示已经有可执行权限了</strong>，如果没有通过下一步添加)</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625151420270.png" alt="image-20220625151420270"></p>
<p>给<code>vmware-install-pl</code>，添加可执行权限，使用命令<code>sudo chmod +x vmware-install-pl</code>，输入密码</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625151520092.png" alt="image-20220625151520092"></p>
<p>执行<code>vmware-install-pl</code>，直接执行，权限不够，需要添加<code>sudo</code></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625151825604.png" alt="image-20220625151825604"></p>
<p>第一个问题是，是否继续安装，输入<code>y</code>表示同意，其他问题回车选择默认输入即可，直到安装完成</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625152016944.png" alt="image-20220625152016944"></p>
<p>安装完成后：</p>
<ul>
<li>屏幕会自适应窗口大小；</li>
<li>支持与windows复制粘贴、文件拖进拖出的操作；</li>
</ul>
<p><img src="/../images/posts/ros-installation.assets/image-20220625152214865.png" alt="image-20220625152214865"></p>
<h4 id="4-软件源配置"><a href="#4-软件源配置" class="headerlink" title="4. 软件源配置"></a>4. 软件源配置</h4><p>打开设置<code>System Settings</code>—-<code>Software &amp; Updates</code> —- <code>Download from</code> —- <code>Select Best Server</code> ，等待测试完成，选择最佳源，然后需要更新软件源，系统可能会弹出窗口提示，或者命令窗口输入<code>sudo apt-get update</code>也可。</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625154100908.png" alt="image-20220625154100908"></p>
<h4 id="5-安装中文输入法"><a href="#5-安装中文输入法" class="headerlink" title="5. 安装中文输入法"></a>5. 安装中文输入法</h4><h5 id="安装fcitx"><a href="#安装fcitx" class="headerlink" title="安装fcitx"></a>安装fcitx</h5><p>打开设置<code>System Settings</code>，点击<code>Language Support</code>，确认<code>install</code>，这里主要就是安装<code>fcitx</code>，其实也可以直接输入<code>sudo apt-get install fcitx</code>安装</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625154405190.png" alt="image-20220625154405190"></p>
<p>重启电脑，<code>kygboard input method system</code>切换为<code>fcitx</code></p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625155405433.png" alt="image-20220625155405433"></p>
<h5 id="安装googlepinyin"><a href="#安装googlepinyin" class="headerlink" title="安装googlepinyin"></a>安装googlepinyin</h5><ol>
<li><p>输入<code>sudo apt install fcitx-googlepinyin -y</code>；</p>
</li>
<li><p>修复依赖关系：<code>sudo apt-get install -f</code>；</p>
</li>
<li><p>重启完成安装；</p>
</li>
</ol>
<p><code>win+a</code>打开所有应用，找到<code>Fcitx Configuration</code>,点击打开</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625160003361.png" alt="image-20220625160003361"></p>
<p>添加新输入法</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625160124270.png" alt="image-20220625160124270"></p>
<p>取消勾选</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625160223105.png" alt="image-20220625160223105"></p>
<p>输入<code>Pinyin</code>，添加所需要的输入法（其实也可以不下载Google Pinyin，系统自带其他两个，只不过不太好用罢了）</p>
<p><img src="/../images/posts/ros-installation.assets/image-20220625160309679.png" alt="image-20220625160309679"></p>
<p>切换输入法<code>ctrl+space</code>，修改成其他键的方法自行<code>google</code></p>
<h5 id="卸载googlepinyin"><a href="#卸载googlepinyin" class="headerlink" title="卸载googlepinyin"></a>卸载googlepinyin</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge fcitx-googlepinyin</span><br></pre></td></tr></table></figure>

<h2 id="ROS-Kinetic-安装"><a href="#ROS-Kinetic-安装" class="headerlink" title="ROS Kinetic 安装"></a>ROS Kinetic 安装</h2><p><a href="%5B(69%E6%9D%A1%E6%B6%88%E6%81%AF">原文博客(Ubuntu16安装ROS Kinetic Kame（内含Gazebo）)</a> Ubuntu16安装ROS Kinetic Kame（内含Gazebo）_MonroeLiu的博客-CSDN博客](<a href="https://blog.csdn.net/m0_46216098/article/details/123764190?spm=1001.2014.3001.5502">https://blog.csdn.net/m0_46216098/article/details/123764190?spm=1001.2014.3001.5502</a>))</p>
<h3 id="一、Kinetic-安装"><a href="#一、Kinetic-安装" class="headerlink" title="一、Kinetic 安装"></a>一、Kinetic 安装</h3><h4 id="1-添加下载源"><a href="#1-添加下载源" class="headerlink" title="1. 添加下载源"></a>1. 添加下载源</h4><p>官方默认安装源:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></pre></td></tr></table></figure>

<p>国内清华的安装源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>国内中科大的安装源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>

<p>PS : 建议使用国内资源，安装速度更快。</p>
<h4 id="2-设置密钥"><a href="#2-设置密钥" class="headerlink" title="2. 设置密钥"></a>2. 设置密钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver &#x27;hkp://keyserver.ubuntu.com:80&#x27; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure>

<h4 id="3-更新源"><a href="#3-更新源" class="headerlink" title="3. 更新源"></a>3. 更新源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="4-安装完整安装包（时间较长耐心等待…）"><a href="#4-安装完整安装包（时间较长耐心等待…）" class="headerlink" title="4. 安装完整安装包（时间较长耐心等待…）"></a>4. 安装完整安装包（时间较长耐心等待…）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-desktop-full -y</span><br></pre></td></tr></table></figure>

<h4 id="错误及解决"><a href="#错误及解决" class="headerlink" title="错误及解决"></a>错误及解决</h4><h5 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E: Failed to fetch http://packages.ros.org/ros/ubuntu/pool/main/p/pyside2/python-pyside2.qthelp_2.0.0+dev1-1~202102130210~rev1858~pkg5~git131fdfd1~ubuntu16.04.1_amd64.deb  Connection failed [IP: 64.50.233.100 80]</span><br><span class="line"></span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-installation.assets/image-20220625174707175.png" alt="image-20220625174707175"></p>
<h5 id="原因：网络原因"><a href="#原因：网络原因" class="headerlink" title="原因：网络原因"></a>原因：网络原因</h5><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>输入以下命令，回车（<strong>如仍报出同样错误，重复此操作</strong>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新源</span></span><br><span class="line">sudo apt-get update --fix-missing</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入安装命令</span></span><br><span class="line">sudo apt-get install ros-kinetic-desktop-full -y</span><br></pre></td></tr></table></figure>

<h4 id="卸载kinetic"><a href="#卸载kinetic" class="headerlink" title="卸载kinetic"></a>卸载kinetic</h4><p>可以调用如下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove ros-kinetic-*</span><br></pre></td></tr></table></figure>

<h3 id="二、环境配置、构建依赖和初始化"><a href="#二、环境配置、构建依赖和初始化" class="headerlink" title="二、环境配置、构建依赖和初始化"></a>二、环境配置、构建依赖和初始化</h3><h4 id="1-环境配置（修改-x2F-bashrc文件）"><a href="#1-环境配置（修改-x2F-bashrc文件）" class="headerlink" title="1. 环境配置（修改~&#x2F;.bashrc文件）"></a>1. 环境配置（修改~&#x2F;.bashrc文件）</h4><p>方便在任意终端中使用 ROS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;source /opt/ros/kinetic/setup.bash&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="2-安装构建依赖"><a href="#2-安装构建依赖" class="headerlink" title="2. 安装构建依赖"></a>2. 安装构建依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential -y</span><br></pre></td></tr></table></figure>

<h4 id="3-初始化rosdep"><a href="#3-初始化rosdep" class="headerlink" title="3. 初始化rosdep"></a>3. 初始化rosdep</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-installation.assets/image-20220625194753062.png" alt="image-20220625194753062"></p>
<p>ps：这一步报错可能性很大，两者报错解决方法一样。</p>
<h4 id="错误及解决-1"><a href="#错误及解决-1" class="headerlink" title="错误及解决"></a>错误及解决</h4><h5 id="错误提示-1"><a href="#错误提示-1" class="headerlink" title="错误提示"></a>错误提示</h5><p><img src="/../images/posts/ros-installation.assets/image-20220625180501059.png" alt="image-20220625180501059"></p>
<h5 id="原因：境外资源屏蔽，网络原因"><a href="#原因：境外资源屏蔽，网络原因" class="headerlink" title="原因：境外资源屏蔽，网络原因"></a>原因：境外资源屏蔽，网络原因</h5><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><p>需要修改<strong>资源下载的地址</strong>，将软件包下载到本地，修改相关源码</p>
<h6 id="1-下载软件包"><a href="#1-下载软件包" class="headerlink" title="1. 下载软件包"></a>1. 下载软件包</h6><p>官方地址（github）：<a href="https://github.com/ros/rosdistro">https://github.com/ros/rosdistro</a></p>
<p>B站赵老师（gitee）：<a href="https://gitee.com/zhao-xuzuo/rosdistro">https://gitee.com/zhao-xuzuo/rosdistro</a></p>
<h6 id="2-文件路径"><a href="#2-文件路径" class="headerlink" title="2. 文件路径"></a>2. 文件路径</h6><p>下载完，将文件复制到加目录下，切换进下载的文件夹，打印当前路径<code>pwd</code>。通常下载下来的文件名为<code>rosdistro-master</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印出来的路径大致为</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">USERNAME为你当前的用户空间，一般和用户名一致</span></span><br><span class="line">/home/USERNAME/rosdistro-master</span><br></pre></td></tr></table></figure>

<h6 id="3-需要修改四个文件："><a href="#3-需要修改四个文件：" class="headerlink" title="3. 需要修改四个文件："></a>3. 需要修改<strong>四个</strong>文件：</h6><ol>
<li>&#x2F;home&#x2F;USERNAME&#x2F;rosdistro-master&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.list</li>
<li>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;sources_list.py</li>
<li>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;rep3.py</li>
<li>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdistro&#x2F;_<em>init</em>_.py</li>
</ol>
<p>主要就是将</p>
<p>其中的</p>
<p><code>https://raw.githubusercontent.com/ros/rosdistro/master</code></p>
<p>替换为</p>
<p><code>file:///home/USERNAME/rosdistro-master</code> <strong>（你的文件路径）</strong></p>
<p><strong>注意</strong>：python文件中url本地文件地址格式是：<strong>file:&#x2F;&#x2F;</strong>+<strong>文件地址</strong></p>
<h6 id="文件1-20-default-list"><a href="#文件1-20-default-list" class="headerlink" title="文件1 20-default.list"></a>文件1 20-default.list</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /home/USERNAME/rosdistro-master/rosdep/sources.list.d/20-default.list</span><br></pre></td></tr></table></figure>

<p>修改后样例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># os-specific listings first</span><br><span class="line">yaml file:///home/USERNAME/rosdistro-master/rosdep/osx-homebrew.yaml osx</span><br><span class="line"></span><br><span class="line"># generic</span><br><span class="line">yaml file:///home/USERNAME/rosdistro-master/rosdep/base.yaml</span><br><span class="line">yaml file:///home/USERNAME/rosdistro-master/rosdep/python.yaml</span><br><span class="line">yaml file:///home/USERNAME/rosdistro-master/rosdep/ruby.yaml</span><br><span class="line">gbpdistro file:///home/USERNAME/rosdistro-master/releases/fuerte.yaml fuerte</span><br><span class="line"></span><br><span class="line"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="文件2-sources-list-py"><a href="#文件2-sources-list-py" class="headerlink" title="文件2 sources_list.py"></a>文件2 sources_list.py</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/lib/python2.7/dist-packages/rosdep2/sources_list.py</span><br></pre></td></tr></table></figure>

<p>修改后样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default file to download with &#x27;init&#x27; command in order to bootstrap</span></span><br><span class="line"><span class="comment"># rosdep</span></span><br><span class="line"><span class="comment"># DEFAULT_SOURCES_LIST_URL = &#x27;https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/sources.list.d/20-default.list&#x27;</span></span><br><span class="line">DEFAULT_SOURCES_LIST_URL = <span class="string">&#x27;file:///home/USERNAME/rosdistro-master/rosdep/sources.list.d/20-default.list&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="文件3-rep3-py"><a href="#文件3-rep3-py" class="headerlink" title="文件3 rep3.py"></a>文件3 rep3.py</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/lib/python2.7/dist-packages/rosdep2/rep3.py</span><br></pre></td></tr></table></figure>

<p>修改后样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># location of targets file for processing gbpdistro files</span></span><br><span class="line"><span class="comment"># REP3_TARGETS_URL = &#x27;https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml&#x27;</span></span><br><span class="line">REP3_TARGETS_URL = <span class="string">&#x27;file:///home/USERNAME/rosdistro-master/releases/targets.yaml&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="文件4-init-py"><a href="#文件4-init-py" class="headerlink" title="文件4 _init_.py"></a>文件4 _<em>init</em>_.py</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/lib/python2.7/dist-packages/rosdistro/__init__.py</span><br></pre></td></tr></table></figure>

<p>修改后样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># index information</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DEFAULT_INDEX_URL = &#x27;https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml&#x27;</span></span><br><span class="line">DEFAULT_INDEX_URL = <span class="string">&#x27;file:///home/USERNAME/rosdistro-master/index-v4.yaml&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="重新运行并成功"><a href="#重新运行并成功" class="headerlink" title="重新运行并成功"></a>重新运行并成功</h6><p><img src="/../images/posts/ros-installation.assets/image-20220625194353830.png" alt="image-20220625194353830"></p>
<h3 id="三、测试（小海龟）"><a href="#三、测试（小海龟）" class="headerlink" title="三、测试（小海龟）"></a>三、测试（小海龟）</h3><p>打开三个命令窗口，分别输入</p>
<h4 id="启动roscore"><a href="#启动roscore" class="headerlink" title="启动roscore"></a>启动roscore</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-installation.assets/image-20220625202612031.png" alt="image-20220625202612031"></p>
<h4 id="启动海龟GUI"><a href="#启动海龟GUI" class="headerlink" title="启动海龟GUI"></a>启动海龟GUI</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rosrun为ROS命令行工具： rosrun 节点包 节点名</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-installation.assets/image-20220625202625251.png" alt="image-20220625202625251"></p>
<h4 id="启动键盘控制节点"><a href="#启动键盘控制节点" class="headerlink" title="启动键盘控制节点"></a>启动键盘控制节点</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>

<p><img src="/../images/posts/ros-installation.assets/image-20220625202658273.png" alt="image-20220625202658273"></p>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="/../images/posts/ros-installation.assets/image-20220625202750594.png" alt="image-20220625202750594"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通用安装完成，如果还需要更多操作，需要下载相关依赖和扩展，比如无人机还需要大疆SDK等。</p>
<p>@merlotliu 2022.06.25</p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
</search>
